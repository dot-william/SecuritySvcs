/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.Helper;
import Controller.SQLite;
import Controller.Secure;
import static Controller.Secure.DialogBox;
import Model.Product;
import Model.User;
import Model.History; 
import java.util.Date;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author beepxD
 */
public class MgmtProduct extends javax.swing.JPanel {

    public SQLite sqlite;
    public DefaultTableModel tableModel;
    private User currentUser; 
    public Secure secure = new Secure();
    public Helper helper = new Helper();
    public MgmtProduct(SQLite sqlite) {
        initComponents();
        this.sqlite = sqlite;
        tableModel = (DefaultTableModel)table.getModel();
        table.getTableHeader().setFont(new java.awt.Font("SansSerif", java.awt.Font.BOLD, 14));

//        UNCOMMENT TO DISABLE BUTTONS
//        purchaseBtn.setVisible(false);
//        addBtn.setVisible(false);
//        editBtn.setVisible(false);
//        deleteBtn.setVisible(false);
    }

    public void init(User currentUser){
        this.currentUser = currentUser;
        //      CLEAR TABLE
        for(int nCtr = tableModel.getRowCount(); nCtr > 0; nCtr--){
            tableModel.removeRow(0);
        }
        int role = this.currentUser.getRole(); 
        switch (role) {
            // client can only buy products 
            case (2):
                purchaseBtn.setVisible(true);
                addBtn.setVisible(false);
                editBtn.setVisible(false);
                deleteBtn.setVisible(false);
                break; 
            // staff and manager can add, edit, or delete products
            case (3):
                purchaseBtn.setVisible(false);
                addBtn.setVisible(true);
                editBtn.setVisible(true);
                deleteBtn.setVisible(true);
                break;
            case (4):
                purchaseBtn.setVisible(false);
                addBtn.setVisible(true);
                editBtn.setVisible(true);
                deleteBtn.setVisible(true);
                break;
            default:
                System.out.println("Error, wrong privileges");
        }
                
        //LOAD CONTENTS
        loadContents(); 
    }
    
    public void loadContents() {
        ArrayList<Product> products = sqlite.getProduct();
        for(int nCtr = 0; nCtr < products.size(); nCtr++){
            tableModel.addRow(new Object[]{
                products.get(nCtr).getName(), 
                products.get(nCtr).getStock(), 
                products.get(nCtr).getPrice()});
        }
    }
    
    public void reloadContents() {
        for(int nCtr = tableModel.getRowCount(); nCtr > 0; nCtr--){
            tableModel.removeRow(0);
        }
        loadContents();
    }
    
    public void designer(JTextField component, String text){
        component.setSize(70, 600);
        component.setFont(new java.awt.Font("Tahoma", 0, 18));
        component.setBackground(new java.awt.Color(240, 240, 240));
        component.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        component.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), text, javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12)));
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        purchaseBtn = new javax.swing.JButton();
        addBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();

        table.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Stock", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        table.setRowHeight(24);
        table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setMinWidth(50);
            table.getColumnModel().getColumn(1).setMaxWidth(100);
            table.getColumnModel().getColumn(2).setMaxWidth(100);
        }

        purchaseBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        purchaseBtn.setText("PURCHASE");
        purchaseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purchaseBtnActionPerformed(evt);
            }
        });

        addBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        addBtn.setText("ADD");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        editBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        editBtn.setText("EDIT");
        editBtn.setToolTipText("");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        deleteBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        deleteBtn.setText("DELETE");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(purchaseBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(addBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(editBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(deleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(purchaseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    
    public User getCurrentUser() {
        return this.currentUser;
    }
    
    private void purchaseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purchaseBtnActionPerformed
        User currUser = getCurrentUser();
        
        // Checks if there is row selected and actual role is 2 (client)
        if(table.getSelectedRow() >= 0 && currUser.getRole() == 2){
            JTextField stockFld = new JTextField("");
            designer(stockFld, "PRODUCT STOCK");
            String itemName = tableModel.getValueAt(table.getSelectedRow(), 0).toString();

            Object[] message = {
                "How many " + itemName + " do you want to purchase?", stockFld
            };
            
           
            int result = JOptionPane.showConfirmDialog(null, message, "PURCHASE PRODUCT", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null);

            if (result == JOptionPane.OK_OPTION) {
                
                // Validate input
                String userInput = stockFld.getText();
                boolean isValidInput = secure.checkIfValidPurchase(userInput);
                
                if(isValidInput) {
                    // if valid check if there is strStock, assumed product exists because selected by user
                    
                    Product item = sqlite.getProduct(itemName);
                    int numWant = Integer.parseInt(userInput);
                    int numStock = item.getStock();
                    
                    if(numWant <= numStock) {
                        // If amount is less than or equal to strStock, update the products
                        int updatedStock = numStock - numWant;
                        item.setStock(updatedStock);
                        
                        boolean successful = sqlite.updateProduct(item);
                        
                        if(successful) {
                            String timestamp = helper.getCurrentTimestamp();
                            //System.out.println("Price: " + item.getPrice());
                            this.sqlite.addHistory(this.currentUser.getUsername(), item.getName(), numWant, item.getPrice(), timestamp);
                            //System.out.println("Purchase successful");
                            DialogBox.showSuccessDialog("Successful Purchase!", "The product has been purchased.");
                            sqlite.addLogs("purchaseSuccess", currUser.getUsername(), "Successfully purchased " + item.getName() +".", timestamp);
                        }
                        reloadContents();
                    } else {
                        DialogBox.showErrorDialog("Invalid purchase", "The amount you want to purchase exceeds the available stock. Please try again.");
                        String timestamp = helper.getCurrentTimestamp();
                        sqlite.addLogs("purchaseFailed", currUser.getUsername(), "Failed to purchase " + item.getName() + ".", timestamp);
                    }
                    
                } else {
                    DialogBox.showErrorDialog("Invalid input", "The amount you entered is invalid. Please try again.");
                    String timestamp = helper.getCurrentTimestamp();
                    sqlite.addLogs("purchaseFailed", currUser.getUsername(), "Entered invalid input.", timestamp);
                }
            }
        }
    }//GEN-LAST:event_purchaseBtnActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        JTextField nameFld = new JTextField();
        JTextField stockFld = new JTextField();
        JTextField priceFld = new JTextField();

        designer(nameFld, "PRODUCT NAME");
        designer(stockFld, "PRODUCT STOCK");
        designer(priceFld, "PRODUCT PRICE");

        Object[] message = {
            "Insert New Product Details:", nameFld, stockFld, priceFld
        };
            
        int result = JOptionPane.showConfirmDialog(null, message, "ADD PRODUCT", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null);
        User currUser = getCurrentUser();
        
        // Additional check if role is 3 or 4 (staff or manager)
        if (result == JOptionPane.OK_OPTION && (currUser.getRole() == 3 || currUser.getRole() == 4)) {
            String strName = nameFld.getText().toLowerCase().trim();
            String strStock = stockFld.getText().trim();
            String strPrice = priceFld.getText().trim();
            if (!secure.checkIfValidProductName(strName)) {
                DialogBox.showErrorDialog("Invalid name", "Name must be alphanumeric and between 1 and 30 characters.");
                String timestamp = helper.getCurrentTimestamp();
                sqlite.addLogs("addProductFailed", currUser.getUsername(), "User entered invalid product name.", timestamp);
            }
            else if (!secure.checkIfValidPurchase(strStock)) {
                DialogBox.showErrorDialog("Invalid stock", "Stock must be a positive integer with a maximum of 10 digits.");
                String timestamp = helper.getCurrentTimestamp();
                sqlite.addLogs("addProductFailed", currUser.getUsername(), "User entered invalid stock for product.", timestamp);
            } 
            else if (!secure.checkIfValidPrice(strPrice)) {
                DialogBox.showErrorDialog("Invalid price", "Price must be a positive decimal number with a maximum of 10 digits and 2 decimal places.");
                String timestamp = helper.getCurrentTimestamp();
                sqlite.addLogs("addProductFailed", currUser.getUsername(), "User entered invalid price for product.", timestamp);
            }
            else {
                float price = Float.parseFloat(strPrice);
                int stock = Integer.parseInt(strStock);
                sqlite.addProduct(strName, stock, price); 
                this.reloadContents();
                DialogBox.showSuccessDialog("Product successfully added", "The product has been added successfully."); 
                String timestamp = helper.getCurrentTimestamp();
                sqlite.addLogs("addProductSuccess", currUser.getUsername(), "User added product (" + strName + ") successfully.", timestamp);
            }
        }
    }//GEN-LAST:event_addBtnActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        User currUser = getCurrentUser();
        
        if(table.getSelectedRow() >= 0 && (currUser.getRole() == 3 || currUser.getRole() == 4)){
            JTextField nameFld = new JTextField(tableModel.getValueAt(table.getSelectedRow(), 0) + "");
            JTextField stockFld = new JTextField(tableModel.getValueAt(table.getSelectedRow(), 1) + "");
            JTextField priceFld = new JTextField(tableModel.getValueAt(table.getSelectedRow(), 2) + "");

            designer(nameFld, "PRODUCT NAME");
            designer(stockFld, "PRODUCT STOCK");
            designer(priceFld, "PRODUCT PRICE");

            Object[] message = {
                "Edit Product Details:", nameFld, stockFld, priceFld
            };

            int result = JOptionPane.showConfirmDialog(null, message, "EDIT PRODUCT", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null);

            if (result == JOptionPane.OK_OPTION) { 
                String strName = nameFld.getText().toLowerCase().trim();
                String strStock = stockFld.getText().trim();
                String strPrice = priceFld.getText().trim();
                if (!secure.checkIfValidProductName(strName)) {
                    DialogBox.showErrorDialog("Invalid name", "Name must be alphanumeric and between 1 and 30 characters. ");
                    String timestamp = helper.getCurrentTimestamp();
                    sqlite.addLogs("editProductFailed", currUser.getUsername(), "User edit product name invalid.", timestamp);
                }
                else if (!secure.checkIfValidEditStock(strStock)) {
                    DialogBox.showErrorDialog("Invalid stock", "Stock must be a positive integer with a maximum of 10 digits. ");
                    String timestamp = helper.getCurrentTimestamp();
                    sqlite.addLogs("editProductFailed", currUser.getUsername(), "User edit product stock failed.", timestamp);
                } 
                else if (!secure.checkIfValidPrice(strPrice)) {
                    DialogBox.showErrorDialog("Invalid price", "Price must be a positive decimal number with a maximum of 10 digits.");
                    String timestamp = helper.getCurrentTimestamp();
                    sqlite.addLogs("editProductFailed", currUser.getUsername(), "User edit product price failed.", timestamp);
                }
                else {
                     float price = Float.parseFloat(strPrice);
                     int stock = Integer.parseInt(strStock);
                     Product product = new Product(strName, stock, price);
                     sqlite.updateProduct(product);
                     this.reloadContents();
                     DialogBox.showSuccessDialog("Product successfully edited", "The product has been edited successfully."); 
                     String timestamp = helper.getCurrentTimestamp();
                     sqlite.addLogs("editProductSuccess", currUser.getUsername(), "User successfully edited product " + strName + ".", timestamp);
                }
                
            }
        }
    }//GEN-LAST:event_editBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
         User currUser = getCurrentUser();
        
        if(table.getSelectedRow() >= 0 && (currUser.getRole() == 3 || currUser.getRole() == 4)){
            int result = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete " + tableModel.getValueAt(table.getSelectedRow(), 0) + "?", "DELETE PRODUCT", JOptionPane.YES_NO_OPTION);
            
            if (result == JOptionPane.YES_OPTION) {
                String productName = tableModel.getValueAt(table.getSelectedRow(), 0).toString();
                //System.out.println("Product to be deleted: " + productName);
                sqlite.deleteProduct(productName);
                this.reloadContents();
                DialogBox.showSuccessDialog("Product successfully deleted", "The product has been deleted successfully."); 
                String timestamp = helper.getCurrentTimestamp();
                sqlite.addLogs("deleteProductSuccess", currUser.getUsername(), "User deleted "+ productName + ".", timestamp);
            }
        }
    }//GEN-LAST:event_deleteBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton editBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton purchaseBtn;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
